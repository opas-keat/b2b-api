// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "users/entities"

	mock "github.com/stretchr/testify/mock"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, member
func (_m *Repo) Create(ctx context.Context, member entities.User) (*entities.User, error) {
	ret := _m.Called(ctx, member)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(context.Context, entities.User) *entities.User); ok {
		r0 = rf(ctx, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entities.User) error); ok {
		r1 = rf(ctx, member)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepo(t mockConstructorTestingTNewRepo) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
